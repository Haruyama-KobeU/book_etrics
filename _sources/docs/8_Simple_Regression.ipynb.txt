{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 単回帰分析（Simple Regression）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## 用語集"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* 横断面データ（cross-sectional data）\n",
    "    * ある時点において複数の対象を観察し収集したデータ（例えば，2018年の47都道府県の県内総生産）\n",
    "* 時系列データ（time-series data）\n",
    "    * ある項目について時間に沿って集めたデータ（例えば，1950~2018年の兵庫県の県内総生産の年次データ）\n",
    "* パネル・データ（panel ata）\n",
    "    * 横断面データと時系列データの両方の特徴を兼ね備えたデータ。（例えば，1990~2018年の47都道府県の県内総生産データ）\n",
    "* 観測値 ＝ observations (observed values)\n",
    "    * データの値（例えば，価格や人数）\n",
    "    * a value of individual data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* 標本 ＝ sample ＝ サンプル\n",
    "    * 観測値で構成されるデータまたはデータ・セット\n",
    "    * a set of data\n",
    "* 標本の大きさ ＝ sample size ＝ サンプル・サイズ\n",
    "    * 母集団から$n$個の観測値を収集したとすると，$n$＝「標本の大きさ」\n",
    "* 標本数 ＝ number of samples\n",
    "    * 母集団から$n$個の観測値の標本を$N$組収集したとすると，$N$＝「標本数」\n",
    "    * $N$の標本数がある場合，個々の標本の大きさを$n_i$, $i=1,2,3,...N$と書くこともできる。\n",
    "* 統計量 ＝ statistics\n",
    "    * 標本データの特徴を要約するために使われる**関数**（例えば，平均の式）。\n",
    "    * 実際にデータを代入し統計量を計算して得る数値（例えば，経済学部生の身長の平均）は確率変数（random variables）。\n",
    "* 推定量 ＝ estimators\n",
    "    * 母集団のパラメータを推定するための**関数**（例えば，回帰直線の係数）\n",
    "    * 確率変数\n",
    "* 推定値 ＝ estimates\n",
    "    * 母集団のパラメータを推知するために推定量を使い実際に計算して得た数値（例えば，平均値）\n",
    "    * 確率変数の実現値"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* 母集団回帰式 ＝ Population Regression Equation (PRE)\n",
    "    * 母集団の値を生成する回帰式（観測不可能）\n",
    "    * データ発生プロセス（Data Generating Process; DGP）\n",
    "    $$ y = \\beta_0 + \\beta_1 x + u$$\n",
    "* 誤差項（攪乱項）＝ (random) errors\n",
    "    * 母集団回帰式にある観測できないランダム変数（PREの$u$）\n",
    "* モデル = models\n",
    "    * 母集団のパラメータを推定するために使う回帰式\n",
    "* 残差 ＝ residuals\n",
    "    * 回帰式の被説明変数の観測値と予測値の差（次式の$\\hat{u}$）\n",
    "    $$ \\hat{u}_i=y_i-\\hat{\\beta}_0-\\hat{\\beta}_1x_i$$\n",
    "        * $\\hat{\\beta}_0$, $\\hat{\\beta}_0$はデータを使って計算した推定量\n",
    "        * $i=1,2,...n$（$n$は標本の大きさ）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## 説明"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "説明変数が１つの回帰式を考える。\n",
    "\n",
    "$$y_i=\\beta_0+\\beta_1 x_i + u_i$$\n",
    "\n",
    "* $y_i=$ 被説明変数（explained variable）\n",
    "    * 従属変数（dependent variable）\n",
    "    * regressand\n",
    "* $x_i=$ 説明変数（explanatory variable）\n",
    "    * 独立変数（independent variable）\n",
    "    * regressor\n",
    "* $u_i=$ 誤差項（errors)\n",
    "    * 観測不可能なランダムな要素\n",
    "    * 平均はゼロと仮定する（重回帰分析の章でより詳しく説明する）\n",
    "* $i=1,2,...n$：観測値のインデックス\n",
    "* $\\beta_0$：定数項（観測不可能なため推定する）\n",
    "* $\\beta_1$：スロープ係数（観測不可能なため推定する）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "---\n",
    "**最小二乗法推定法（Ordinary Least Squares; OLS）**\n",
    "\n",
    "$$\\sum_{i=1}^n\\left(y_i-\\beta_0-\\beta_1 x_i\\right)^2$$\n",
    "\n",
    "を最小化する$\\beta_0$と$\\beta_1$を選択すると以下を得る：\n",
    "\n",
    "$$\n",
    "\\hat{\\beta}_0=\\bar{y}-\\hat{\\beta}_1\\bar{x},\\qquad\\qquad\n",
    "\\hat{\\beta}_1=\\frac{\\text{Cov}(x,y)}{\\text{Var}(x)}\n",
    "$$\n",
    "\n",
    "* `^`（ハット）がある変数（$\\hat{\\beta}_0$と$\\hat{\\beta}_1$）を**OLS推定量**と呼ぶ\n",
    "* `-`（バー）がある変数（例えば，$\\bar{y}$）は平均値\n",
    "* $\\text{Cov}(x,y)=$ $x$と$y$の共分散\n",
    "* $\\text{Var}(x)=$ $x$の分散\n",
    "* $x$のように添え字$i$を省いた場合は，$x_1$から$x_n$までの全ての観測値という意味（$y$も同じ）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "また以下を定義する。\n",
    "* 予測値 $\\hat{y}_i$\n",
    "\n",
    "$$\\hat{y}_i=\\hat{\\beta}_0 + \\hat{\\beta}_1x_i$$\n",
    "\n",
    "* 残差 $\\hat{u}_i$\n",
    "\n",
    "$$\\hat{u}_i=y_i-\\hat{y}_i$$\n",
    "\n",
    "データを使ってPythonの使い方を説明するが，次の世界的に有名な教科書のデータを使う。\n",
    "\n",
    "J.M. Wooldridge (2016) _Introductory Econometrics: A Modern Approach_, Cengage Learning, 6th edition."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## データ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from wooldridge import *  # wooldridgeのデータ・パッケージ\n",
    "from scipy.stats import norm\n",
    "from statsmodels.formula.api import ols\n",
    "from see import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "データの読み込み。`wooldridge`パッケージのデータ読み込み関数は`dataWoo()`で，引数にはデータの名前を文字列として入力する。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "df = dataWoo('wage1')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "オプション`description=True`を追加するとデータの説明を表示することができる。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name of dataset: wage1\n",
      "no of variables: 24\n",
      "no of observations: 526\n",
      "\n",
      "+----------+---------------------------------+\n",
      "| variable | label                           |\n",
      "+----------+---------------------------------+\n",
      "| wage     | average hourly earnings         |\n",
      "| educ     | years of education              |\n",
      "| exper    | years potential experience      |\n",
      "| tenure   | years with current employer     |\n",
      "| nonwhite | =1 if nonwhite                  |\n",
      "| female   | =1 if female                    |\n",
      "| married  | =1 if married                   |\n",
      "| numdep   | number of dependents            |\n",
      "| smsa     | =1 if live in SMSA              |\n",
      "| northcen | =1 if live in north central U.S |\n",
      "| south    | =1 if live in southern region   |\n",
      "| west     | =1 if live in western region    |\n",
      "| construc | =1 if work in construc. indus.  |\n",
      "| ndurman  | =1 if in nondur. manuf. indus.  |\n",
      "| trcommpu | =1 if in trans, commun, pub ut  |\n",
      "| trade    | =1 if in wholesale or retail    |\n",
      "| services | =1 if in services indus.        |\n",
      "| profserv | =1 if in prof. serv. indus.     |\n",
      "| profocc  | =1 if in profess. occupation    |\n",
      "| clerocc  | =1 if in clerical occupation    |\n",
      "| servocc  | =1 if in service occupation     |\n",
      "| lwage    | log(wage)                       |\n",
      "| expersq  | exper^2                         |\n",
      "| tenursq  | tenure^2                        |\n",
      "+----------+---------------------------------+\n",
      "\n",
      "These are data from the 1976 Current Population Survey, collected by\n",
      "Henry Farber when he and I were colleagues at MIT in 1988.\n"
     ]
    }
   ],
   "source": [
    "dataWoo('wage1',description=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "このデータを使い以下の問題を考える。\n",
    "\n",
    "「教育水準は賃金にどのような影響を与えるのか」\n",
    "\n",
    "* 被説明変数：`wage`\n",
    "* 説明変数：`educ`\n",
    "\n",
    "まず関係する変数だけを取り出す。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "df = df.loc[:,['wage','educ']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wage</th>\n",
       "      <th>educ</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.10</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.24</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.00</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   wage  educ\n",
       "0  3.10    11\n",
       "1  3.24    12\n",
       "2  3.00    11"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 526 entries, 0 to 525\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   wage    526 non-null    float64\n",
      " 1   educ    526 non-null    int64  \n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 8.3 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wage</th>\n",
       "      <th>educ</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.896103</td>\n",
       "      <td>12.562738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.693086</td>\n",
       "      <td>2.769022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.530000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.330000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.650000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.880000</td>\n",
       "      <td>14.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>24.980000</td>\n",
       "      <td>18.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             wage        educ\n",
       "count  526.000000  526.000000\n",
       "mean     5.896103   12.562738\n",
       "std      3.693086    2.769022\n",
       "min      0.530000    0.000000\n",
       "25%      3.330000   12.000000\n",
       "50%      4.650000   12.000000\n",
       "75%      6.880000   14.000000\n",
       "max     24.980000   18.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## 「手計算」"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "共分散"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[13.63888436,  4.150864  ],\n",
       "       [ 4.150864  ,  7.66748506]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mat_wage_educ = np.cov(df['wage'],df['educ'])\n",
    "cov_wage_educ = mat_wage_educ[0, 1]\n",
    "mat_wage_educ"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "分散"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13.63888436377501, 7.667485062466051)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var_wage = df['wage'].var(ddof=1)\n",
    "var_educ = df['educ'].var(ddof=1)\n",
    "var_wage, var_educ"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "平均"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "mean_wage = df['wage'].mean()\n",
    "mean_educ = df['educ'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "$\\beta_1$の推定値 $\\left(\\hat{\\beta}_1\\right)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5413592546651744"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b1hat = cov_wage_educ / var_educ\n",
    "b1hat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "$\\beta_0$の推定値 $\\left(\\hat{\\beta}_0\\right)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.9048516119572092"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b0hat = mean_wage - b1hat * mean_educ\n",
    "b0hat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## `statsmodels`を使う"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "`statsmodels`のパッケージを使うことにより，多くの計算を自動化できる。以下の順番でおこなる。\n",
    "* `old`サブパッケージを読み込む\n",
    "* 回帰式を定義する\n",
    "* 推定値の自動計算"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**サブパッケージを読み込み**\n",
    "\n",
    "`statsmodels`には多くのサブパッケージや関数があり，ここでは回帰式を文字列で書くことができる`ols`をつかう。（他のコードの書き方もあるが，他のトピックで扱う。）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# この章の最初に読み込んでいるので再度読み込む必要はないが、、、\n",
    "from statsmodels.formula.api import ols"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**回帰式の定義**\n",
    "\n",
    "* 式を`''`で囲む（文字列）\n",
    "* 定数項である（$\\beta_0$）は自動的に挿入される。\n",
    "    * 定数を省きたい場合は式に`-1`を加える。\n",
    "    * 後で扱う`linearmodels`パッケージでは，定数が自動的に挿入されないので要注意。\n",
    "\n",
    "---\n",
    "定数項がある場合：\n",
    "```\n",
    "被説明変数 ~ 説明変数\n",
    "```\n",
    "定数項がない場合：\n",
    "```\n",
    "被説明変数 ~ -1 + 説明変数\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "formula = 'wage ~ educ'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**自動計算**\n",
    "\n",
    "まず自動計算の準備として計算の対象となるもの（オブジェクト）を生成し、\"model\"の省略形の`mod`に格納する。ここで第１引数は上で定義した回帰式，第２引数`data`は使用するデータをの指定。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "mod = ols(formula, data=df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "実際に計算するためにメソッド`fit()`を使い，それを変数`res`に格納する。（`res`はresultの略）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "res = mod.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "上の２つを分けずに一行で書いてもOK。\n",
    "```\n",
    "res = old(formula, data=df).fit()\n",
    "```\n",
    "\n",
    "`res`のメソッドや属性をチェックしてみる。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "    <                    <=                   ==                   !=\n",
       "    >                    >=                   dir()                hash()\n",
       "    help()               repr()               str()                .HC0_se\n",
       "    .HC1_se              .HC2_se              .HC3_se              .aic\n",
       "    .bic                 .bse                 .centered_tss\n",
       "    .compare_f_test()    .compare_lm_test()\n",
       "    .compare_lr_test()                        .condition_number    .conf_int()\n",
       "    .conf_int_el()       .cov_HC0             .cov_HC1             .cov_HC2\n",
       "    .cov_HC3             .cov_kwds            .cov_params()        .cov_type\n",
       "    .df_model            .df_resid            .eigenvals           .el_test()\n",
       "    .ess                 .f_pvalue            .f_test()\n",
       "    .fittedvalues        .fvalue              .get_influence()\n",
       "    .get_prediction()    .get_robustcov_results()\n",
       "    .initialize()        .k_constant          .llf                 .load()\n",
       "    .model               .mse_model           .mse_resid           .mse_total\n",
       "    .nobs                .normalized_cov_params\n",
       "    .outlier_test()      .params              .predict()           .pvalues\n",
       "    .remove_data()       .resid               .resid_pearson       .rsquared\n",
       "    .rsquared_adj        .save()              .scale               .ssr\n",
       "    .summary()           .summary2()          .t_test()\n",
       "    .t_test_pairwise()                        .tvalues\n",
       "    .uncentered_tss      .use_t               .wald_test()\n",
       "    .wald_test_terms()                        .wresid"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "see(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "例えば，上のリストの中に`.params`とあるが，このデータ属性を使い係数の推定値を取り出すことができる。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept   -0.904852\n",
       "educ         0.541359\n",
       "dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "また`wage`の予測値は`res.fittedvalues`もしくは`res.predict()`で得ることができる。`res.fittedvalues`はデータ属性であり`res.predict()`はメソッドであるが、後者は引数がない場合は前者と同じ結果を示すことになる。\n",
    "\n",
    "上のリストが示すように`res`には多くの情報が詰まっており，これらを駆使し，図を描いたり推定値の検定をおこなうことになる。\n",
    "\n",
    "この中にある`summary()`を使い，結果がまとめられた表を出力することも可能である。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                   wage   R-squared:                       0.165\n",
      "Model:                            OLS   Adj. R-squared:                  0.163\n",
      "Method:                 Least Squares   F-statistic:                     103.4\n",
      "Date:                Tue, 05 May 2020   Prob (F-statistic):           2.78e-22\n",
      "Time:                        17:18:43   Log-Likelihood:                -1385.7\n",
      "No. Observations:                 526   AIC:                             2775.\n",
      "Df Residuals:                     524   BIC:                             2784.\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept     -0.9049      0.685     -1.321      0.187      -2.250       0.441\n",
      "educ           0.5414      0.053     10.167      0.000       0.437       0.646\n",
      "==============================================================================\n",
      "Omnibus:                      212.554   Durbin-Watson:                   1.824\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              807.843\n",
      "Skew:                           1.861   Prob(JB):                    3.79e-176\n",
      "Kurtosis:                       7.797   Cond. No.                         60.2\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "また，この表は３つの表から構成されているため，必要な部分だけを表示することも可能である。\n",
    "```\n",
    "res.summary().tables[0]\n",
    "res.summary().tables[1]\n",
    "res.summary().tables[2]\n",
    "```\n",
    "例えば，係数の推定値に関する基本的な統計量だけを表示するには以下のようにすれば良い。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept     -0.9049      0.685     -1.321      0.187      -2.250       0.441\n",
      "educ           0.5414      0.053     10.167      0.000       0.437       0.646\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "print(res.summary().tables[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "OLS推定の結果を「代入」した`res`には，ここで説明した以外に数多くのそのメソッドや属性が存在する。それらに関する説明は[このサイト](https://www.statsmodels.org/stable/generated/statsmodels.regression.linear_model.RegressionResults.html)を参照すること。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## 図"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "予測値の取得"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "wage_hat = res.fittedvalues"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "図の作成"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "wage_hat = res.fittedvalues\n",
    "plt.scatter('educ', 'wage', data=df)\n",
    "plt.plot(df['educ'],wage_hat, 'r')\n",
    "plt.xlabel('Education')\n",
    "plt.ylabel('Wage')\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## モデルの適合度"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* SST（Total Sum of Squares; 全変動の平方和）\n",
    "\n",
    "$$\\text{SST}=\\sum_{i=1}^n\\left(y_i-\\bar{y}\\right)^2=(n-1)\\cdot\\text{Var}(y)$$\n",
    "\n",
    "* SSE（Explained Sum of Squares; 回帰変動の平方和）\n",
    "\n",
    "$$\n",
    "\\text{SSE}=\\sum_{i=1}^n\\left(\\hat{y}_i-\\bar{y}\\right)^2=(n-1)\\cdot\\text{Var}\\left(\\hat{y}\\right)\n",
    "$$\n",
    "\n",
    "* SSR（Residual Sum of Squares; 残差変動の平方和）\n",
    "\n",
    "$$\n",
    "\\text{SSR}=\\sum_{i=1}^n\\left(\\hat{u}_i-0\\right)^2=(n-1)\\cdot\\text{Var}\\left(\\hat{u}\\right)\n",
    "$$\n",
    "\n",
    "ここで，$\\text{Var}(z)=\\dfrac{1}{n-1}\\sum_{i=1}^n\\left(z_i-\\bar{z}\\right)^2$。これらを使い以下を定義する。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "---\n",
    "* 決定係数\n",
    "\n",
    "$$R^2=\\frac{SSE}{SST}=1-\\frac{SSR}{SST}$$\n",
    "\n",
    "$$\n",
    "R^2\n",
    "=\\frac{\\text{Var}\\left(\\hat{y}\\right)}{\\text{Var}\\left(y\\right)}\n",
    "=1-\\frac{\\text{Var}\\left(\\hat{u}\\right)}{\\text{Var}\\left(y\\right)}\n",
    "$$\n",
    "\n",
    "* 自由度修正後の決定係数\n",
    "\n",
    "$$\\overline{R}^2=1-(1-R^2)\\frac{n-1}{n-k-1}$$\n",
    "\n",
    "ここで，$k=$ **定数項以外の説明変数の数**　（上の例では$k=1$）\n",
    "\n",
    "ここで説明した数値は，上の例の`res`の属性としてを取得できる。\n",
    "```\n",
    "n = res.nobs\n",
    "k = res.df_model\n",
    "n-k-1 = res.df_resid\n",
    "SST = res.centered_tss\n",
    "SSE = res.ess\n",
    "SSR = res.ssr\n",
    "決定係数 = res.rsquared\n",
    "修正済み決定係数 = res.rsquared_adj\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "n = res.nobs\n",
    "k = res.df_model\n",
    "# n-k-1 = res.df_resid\n",
    "SST = res.centered_tss\n",
    "SSE = res.ess\n",
    "SSR = res.ssr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**決定係数**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16475751099205138"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.rsquared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16475751099205138"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1-SSR/SST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16475751099205127"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u_hat = res.resid  # 残差\n",
    "wage = df['wage']  # 被説明変数\n",
    "R2 = 1 - np.var(u_hat) / np.var(wage)\n",
    "R2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**修正済み決定係数**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16316353677638729"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.rsquared_adj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16316353677638729"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adjR2 = 1-(1-R2)*(n-1)/(n-k-1)\n",
    "adjR2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## 変数の変換"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "上の回帰分析では被説明変数は`wage`をそのまま使ったが，労働経済学では賃金の対数をとり推定するのが一般的であり，そのような式を賃金方程式と呼ぶ。その考えに沿って，ここでは`wage`の自然対数変換をおこない回帰分析をおこなう。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### 方法１：回帰式を直接書き換える"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "formula_1 = 'np.log(wage) ~ educ'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "res_1 = ols(formula_1, data=df).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept    0.583773\n",
       "educ         0.082744\n",
       "dtype: float64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_1.params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "（解釈）\n",
    "\n",
    "`res_1`は次式の推定結果である。\n",
    "\n",
    "$\\ln y = \\beta_0+\\beta_1x+u$\n",
    "\n",
    "この式を$x$について微分すると以下を得る。\n",
    "\n",
    "$\\dfrac{d\\ln y}{dx}=\\dfrac{dy/y}{dx}=\\dfrac{y\\text{の%変化}}{dx}=\\beta_1$\n",
    "\n",
    "即ち，$\\beta_1$は$x$（教育年数）が一単位増加した場合，$y$（賃金）が何％変化するかを示している（教育の収益率）。上のOLS推定では教育年数が１年増えると賃金は8.2%増加する。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "wage_log_hat_1 = res_1.fittedvalues\n",
    "plt.scatter(df['educ'], np.log(df.loc[:,'wage']))\n",
    "plt.plot(df['educ'], wage_log_hat_1, 'r')\n",
    "plt.xlabel('Education')\n",
    "plt.ylabel('Log of Wage')\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### 方法２：事前に変数を作成"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "df['wage_log'] = np.log(df['wage'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "formula_2 = 'wage_log ~ educ'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "res_2 = ols(formula_2, data=df).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      0.5838      0.097      5.998      0.000       0.393       0.775\n",
      "educ           0.0827      0.008     10.935      0.000       0.068       0.098\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "print(res_2.summary().tables[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "wage_log_hat_2 = res_2.fittedvalues\n",
    "plt.scatter('educ', 'wage_log', data=df)\n",
    "plt.plot(df['educ'], wage_log_hat_2, 'r')\n",
    "plt.xlabel('Education')\n",
    "plt.ylabel('Log of Wage')\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## シミュレーション：$OLS$推定"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### 母集団の考え方"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "分析の対象となる共通の属性などを持つ個人・企業・産業・地域・国などの集合体といえる。ここで重要な点は母集団の大きさとランダム抽出の関係である。\n",
    "\n",
    "* 「人間の身長」の母集団：地球上の人間\n",
    "    * 全員の身長を測るのはあまりにも費用が高い $\\Rightarrow$ 標本の大きさ$<$母集団の大きさ\n",
    "* 「OECD諸国のGDP」の母集団：34カ国\n",
    "    * 2018年のGDPは簡単に入手可能 $\\Rightarrow$ 標本の大きさ$=$母集団の大きさ？\n",
    "    * 等号で成立する場合，標本ではなく母集団全てのデータを扱うことになり，標本の概念である標準誤差などは意味がなくなる！\n",
    "    * ２つの考え方：標本の大きさ$<$母集団の大きさ\n",
    "        1. 国と時間の概念で考えると母集団の大きさは$\\infty$\n",
    "        2. 確率変数とは実現可能な数値から１つを実現させる関数である。またGDP自体は確率変数として解釈する方が自然である（「重回帰分析」で説明する仮定２を参照）。従って，34カ国の実現可能なGDPの値が母集団である。この解釈によると，標本の大きさ$<$母集団の大きさ。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### プラン"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "回帰分析の理解を深めるするためにシミュレーションを以下の手順でおこなう。\n",
    "\n",
    "**＜Step 1＞**\n",
    "* 母集団の大きさは指定しない。\n",
    "* 母集団のデータを生成する回帰式（母集団回帰式）を定義する。\n",
    "\n",
    "$$Y = \\beta_0 + \\beta_1 X + U$$\n",
    "\n",
    "    * 説明変数$X$と誤差項$U$はランダム変数であり，従って$Y$もランダム変数である。\n",
    "* 母集団から標本を$n$個抽出する。\n",
    "    * 抽出された値はランダム変数の実現値\n",
    "    \n",
    "        $$(y_1,x_1),\\;(y_2,x_2),\\;(y_3,x_3),.....(y_n,x_n)$$\n",
    "        \n",
    "    * 仮定\n",
    "        * $X$は正規分布に従う $\\Rightarrow$ $x_1,\\;x_2,..x_n$は$X$の実現値。\n",
    "        * $U$は正規分布に従う $\\Rightarrow$ $u_1,\\;u_2,..u_n$は$U$の実現値。\n",
    "        * $X$と$U$は無相関。\n",
    "        * 実現値$y_1,\\;y_2,..y_n$は母集団回帰式に従って生成される。\n",
    "        \n",
    "            $$y_i = \\beta_0 + \\beta_1 x_i + u_i,\\qquad i=1,2,3,....n$$\n",
    "            \n",
    "    * $\\beta_0$と$\\beta_1$は未知であり，$u_i$も観測不可能\n",
    "\n",
    "**＜Step 2＞**\n",
    "* $n$個の標本を使い回帰分析を行い，母集団の回帰式のパラメータを推定する。\n",
    "    * $\\hat{\\beta}_0$，$\\hat{\\beta}_1$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### シミュレーション"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "母集団のパラメータの設定"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "b0 = 1  # 定数項\n",
    "b1 = 0.5  # 説明変数の係数\n",
    "su = 1  # 誤差項の標準偏差"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "標本の大きさ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "n = 30"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "ランダム変数の生成による標本抽出"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "x = norm.rvs(4, 1, size=n)\n",
    "u = norm.rvs(0, su, size=n)\n",
    "y = b0 + b1 * x + u"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "このデータから`DataFrame`を作成する。`()`の中の`{}`は辞書。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "df_sim = pd.DataFrame({'X':x, 'Y':y})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "`OLS`推定"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "formula = 'X ~ Y'\n",
    "res_sim = ols(formula, data=df_sim).fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "係数の推定値"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept    3.278049\n",
       "Y            0.211597\n",
       "dtype: float64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_sim.params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### 関数化"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "`def`を使って上のコードを関数としてまとめる。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "def my_sim(n,b0=1,b1=0.5,su=1):  # nを指定する，　他はデフォルトを設定\n",
    "    x = norm.rvs(4, 1, size=n)\n",
    "    u = norm.rvs(0, su, size=n)\n",
    "    y = b0 + b1 * x + u\n",
    "    df_sim = pd.DataFrame({'X':x, 'Y':y})\n",
    "    formula = 'Y ~ X'\n",
    "    res_sim = ols(formula, data=df_sim).fit()\n",
    "    return res_sim.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept    0.964854\n",
       "X            0.503269\n",
       "dtype: float64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_sim(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "`b0`，`b1`，`su`変えて計算してみよう。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### ループを使ってシミュレーション"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "標本の大きさ`n`のデータを`N`組用意し（`N`は標本数），`OLS`推定を`N`回おこなう。シミュレーション毎に計算した回帰係数の推定値の分布を図示する。\n",
    "\n",
    "まず，`def`を使いシミュレーションの関数を作成する。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "def my_sim_loop(n,N,b0=1,b1=0.5,su=1):  # nとN以外はデフォルトを指定\n",
    "    \n",
    "    b0hat_list = []  # OLS推定量を入れる空リスト    \n",
    "    b1hat_list = []  # OLS推定量を入れる空リスト    \n",
    "    \n",
    "    x = norm.rvs(4, 1, size=n)  # for loopの外に置くことにより，N回の回帰分析で同じxを使う\n",
    "    \n",
    "    for i in range(N):  # N 回のループ\n",
    "        u = norm.rvs(0, su, size=n)\n",
    "        y = b0 + b1 * x + u\n",
    "        df_sim = pd.DataFrame({'X':x, 'Y':y})\n",
    "        formula = 'Y ~ X'\n",
    "        res_sim = ols(formula, data=df_sim).fit()\n",
    "        \n",
    "        b0hat_list.append(res_sim.params[0])  # 定数項の値をリストに追加\n",
    "        b1hat_list.append(res_sim.params[1])  # スロープ係数の値をリストに追加\n",
    "        \n",
    "    return x, b0hat_list, b1hat_list  # N回ループ終了後に返すオブジェクト"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "シミュレーションの開始"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "x_val, b0hat, b1hat = my_sim_loop(50,1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4.46545387, 4.3360782 , 5.75446558, 3.49758746, 4.44170526,\n",
       "       3.99481696, 5.9550193 , 4.71295164, 4.47504531, 3.20976635,\n",
       "       3.84468647, 4.35877301, 3.5346601 , 3.68680743, 5.93082332,\n",
       "       3.51693506, 6.17321195, 3.80933942, 5.20127179, 4.42290339,\n",
       "       2.80806252, 5.36515525, 4.3307006 , 4.29759205, 4.2668746 ,\n",
       "       3.48382963, 6.2408616 , 2.93892092, 4.22089261, 5.50533402,\n",
       "       4.19773302, 5.70874229, 3.01537441, 4.93894307, 3.7206606 ,\n",
       "       5.31732558, 5.37716699, 3.88194626, 4.2659428 , 4.96807277,\n",
       "       4.14158351, 3.23509747, 5.16551145, 2.74824305, 5.36765719,\n",
       "       5.32541781, 4.12682818, 3.46907538, 5.21012611, 4.78441637])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_val"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "$\\hat{\\beta}_0$の分布"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAMsUlEQVR4nO3df4hl5X3H8fenrmJ+NKhxtHZXOxaWNFJIDIM1FUpQC/4o1ZYIhpIuYWH/sa1pAnXb/iH9bwMlaQvFskSbLYiJGMtKLAnbrSKFdpsxsYk6CS7W6tStOyE1P9rSdNtv/5gjO653unPvuXfP7DPvFwz3nuece8+Xw85nnn3uc56bqkKS1JYfG7oASdL0Ge6S1CDDXZIaZLhLUoMMd0lq0LahCwC4+OKLa35+fugyJOms8vTTT3+nquZG7dsU4T4/P8/i4uLQZUjSWSXJP6+3z2EZSWqQ4S5JDTLcJalBhrskNchwl6QGGe6S1CDDXZIaZLhLUoMMd0lq0Ka4Q1Vqwfzexzd03Ev7bp1xJZI9d0lqkuEuSQ06bbgneSDJ8STPrmm7KMmhJC90jxd27UnyJ0mOJvlGkg/MsnhJ0mgb6bl/DrjplLa9wOGq2gkc7rYBbgZ2dj97gPumU6YkaRynDfeqegr47inNtwEHuucHgNvXtP9Frfp74IIkl02rWEnSxkw65n5pVR0D6B4v6dq3A6+sOW65a3uLJHuSLCZZXFlZmbAMSdIo0/5ANSPaatSBVbW/qhaqamFubuQXiUiSJjRpuL/2xnBL93i8a18GLl9z3A7g1cnLkyRNYtJwfwzY1T3fBRxc0/7r3ayZa4HvvTF8I0k6c057h2qSh4APARcnWQbuBfYBDyfZDbwM3NEd/lfALcBR4D+Aj82gZknSaZw23KvqI+vsumHEsQXc1bcoSVI/3qEqSQ0y3CWpQYa7JDXIcJekBhnuktQgw12SGmS4S1KDDHdJapDhLkkNMtwlqUGGuyQ1yHCXpAYZ7pLUIMNdkhpkuEtSgwx3SWqQ4S5JDTLcJalBhrskNchwl6QGGe6S1CDDXZIaZLhLUoMMd0lqkOEuSQ0y3CWpQYa7JDXIcJekBm0bugBpq5nf+/iGjntp360zrkQts+cuSQ0y3CWpQb3CPclvJ3kuybNJHkpyfpIrkxxJ8kKSLyQ5b1rFSpI2ZuIx9yTbgd8Crqqq/0zyMHAncAvwmar6fJI/A3YD902lWmlKHPdW6/oOy2wD3pZkG/B24BhwPfBIt/8AcHvPc0iSxjRxuFfVvwB/CLzMaqh/D3gaeL2qTnSHLQPbR70+yZ4ki0kWV1ZWJi1DkjTCxOGe5ELgNuBK4CeBdwA3jzi0Rr2+qvZX1UJVLczNzU1ahiRphD7DMjcC/1RVK1X138CjwM8DF3TDNAA7gFd71ihJGlOfcH8ZuDbJ25MEuAF4HngC+HB3zC7gYL8SJUnj6jPmfoTVD06/Bnyze6/9wD3AJ5IcBd4N3D+FOiVJY+i1/EBV3Qvce0rzi8A1fd5XktSPd6hKUoMMd0lqkKtC6qww1B2lGz2vtNnYc5ekBhnuktQgw12SGuSYu5riGLm0yp67JDXIcJekBhnuktQgw12SGmS4S1KDDHdJapDhLkkNMtwlqUGGuyQ1yHCXpAYZ7pLUIMNdkhpkuEtSg1wVUtqkhvr2KbXBnrskNchwl6QGGe6S1CDDXZIaZLhLUoMMd0lqkOEuSQ1ynrt0lnM+vEax5y5JDTLcJalBvcI9yQVJHknyrSRLST6Y5KIkh5K80D1eOK1iJUkb07fn/sfAl6vqZ4D3AUvAXuBwVe0EDnfbkqQzaOJwT/Iu4BeA+wGq6kdV9TpwG3CgO+wAcHvfIiVJ4+nTc/9pYAX48yRfT/LZJO8ALq2qYwDd4yWjXpxkT5LFJIsrKys9ypAknapPuG8DPgDcV1VXA//OGEMwVbW/qhaqamFubq5HGZKkU/UJ92VguaqOdNuPsBr2ryW5DKB7PN6vREnSuCYO96r6V+CVJO/pmm4AngceA3Z1bbuAg70qlCSNre8dqr8JPJjkPOBF4GOs/sF4OMlu4GXgjp7nkCSNqVe4V9UzwMKIXTf0eV9JUj/eoSpJDTLcJalBhrskNchwl6QGuZ67BrXRtcgljceeuyQ1yHCXpAYZ7pLUIMNdkhpkuEtSgwx3SWqQ4S5JDTLcJalBhrskNchwl6QGGe6S1CDDXZIaZLhLUoMMd0lqkOEuSQ0y3CWpQYa7JDXIcJekBhnuktQgw12SGmS4S1KDDHdJapDhLkkN2jZ0AWrT/N7Hhy5B2tLsuUtSgwx3SWpQ73BPck6Sryf5Urd9ZZIjSV5I8oUk5/UvU5I0jmn03O8GltZsfwr4TFXtBP4N2D2Fc0iSxtAr3JPsAG4FPtttB7geeKQ75ABwe59zSJLG13e2zB8BvwP8eLf9buD1qjrRbS8D20e9MMkeYA/AFVdc0bMMSaez0RlML+27dcaV6EyYuOee5JeA41X19NrmEYfWqNdX1f6qWqiqhbm5uUnLkCSN0Kfnfh3wy0luAc4H3sVqT/6CJNu63vsO4NX+ZUqSxjFxz72qfreqdlTVPHAn8DdV9WvAE8CHu8N2AQd7VylJGsss5rnfA3wiyVFWx+Dvn8E5JEn/j6ksP1BVTwJPds9fBK6ZxvtKkibjHaqS1CDDXZIaZLhLUoMMd0lqkOu5S3oT72Rtgz13SWqQ4S5JDTLcJalBhrskNchwl6QGOVtGY9noTApJw7LnLkkNMtwlqUGGuyQ1yHCXpAYZ7pLUIMNdkhpkuEtSgwx3SWqQNzHJG5OkBtlzl6QG2XOXNJFx/sfnF3ucefbcJalBhrskNchwl6QGGe6S1CDDXZIa5GyZhjl/Xdq67LlLUoMMd0lqkOEuSQ2aONyTXJ7kiSRLSZ5LcnfXflGSQ0le6B4vnF65kqSN6NNzPwF8sqreC1wL3JXkKmAvcLiqdgKHu21J0hk08WyZqjoGHOue/yDJErAduA34UHfYAeBJ4J5eVepNnAUj6XSmMuaeZB64GjgCXNoF/xt/AC6ZxjkkSRvXO9yTvBP4IvDxqvr+GK/bk2QxyeLKykrfMiRJa/QK9yTnshrsD1bVo13za0ku6/ZfBhwf9dqq2l9VC1W1MDc316cMSdIp+syWCXA/sFRVn16z6zFgV/d8F3Bw8vIkSZPos/zAdcBHgW8meaZr+z1gH/Bwkt3Ay8Ad/UqUJI2rz2yZvwWyzu4bJn1fSVJ/3qEqSQ0y3CWpQYa7JDXI9dwlzdxG76p+ad+tM65k67DnLkkNMtwlqUGGuyQ1yHCXpAYZ7pLUIMNdkhpkuEtSg5znLmnTcD789Nhzl6QGGe6S1CDDXZIa5Jj7JrLR8UZJOh177pLUIMNdkhpkuEtSgxxz78E5udIw/N07PXvuktQgw12SGmS4S1KDDHdJapDhLkkNcraMpC2vxdk39twlqUH23M8A14yRdKbZc5ekBtlzl9Ssaf+veZz3G3p83p67JDXIcJekBs0k3JPclOTbSY4m2TuLc0iS1jf1Mfck5wB/CvwisAx8NcljVfX8tM8Fs5mf6uwWSX0NPXd+Fj33a4CjVfViVf0I+Dxw2wzOI0laxyxmy2wHXlmzvQz83KkHJdkD7Ok2f5jk2zOo5eT5PjXW4RcD35lNJWcdr8WbeT1O8lqcNPG1GDObTvVT6+2YRbhnRFu9paFqP7B/BufvLcliVS0MXcdm4LV4M6/HSV6LkzbjtZjFsMwycPma7R3AqzM4jyRpHbMI968CO5NcmeQ84E7gsRmcR5K0jqkPy1TViSS/AXwFOAd4oKqem/Z5ZmxTDhcNxGvxZl6Pk7wWJ226a5GqtwyHS5LOct6hKkkNMtwlqUGG+zqS3JHkuST/m2RTTXE6U1xGYlWSB5IcT/Ls0LUMLcnlSZ5IstT9ftw9dE1DSnJ+kn9I8o/d9fiDoWt6g+G+vmeBXwWeGrqQIaxZRuJm4CrgI0muGraqwXwOuGnoIjaJE8Anq+q9wLXAXVv43wXAfwHXV9X7gPcDNyW5duCaAMN9XVW1VFUzvWt2k3MZiU5VPQV8d+g6NoOqOlZVX+ue/wBYYvWu9C2pVv2w2zy3+9kUs1QMd61n1DISW/aXWG+VZB64GjgybCXDSnJOkmeA48ChqtoU12NLfxNTkr8GfmLErt+vqoNnup5NZkPLSGhrSvJO4IvAx6vq+0PXM6Sq+h/g/UkuAP4yyc9W1eCfz2zpcK+qG4euYRNzGQmNlORcVoP9wap6dOh6Nouqej3Jk6x+PjN4uDsso/W4jITeIkmA+4Glqvr00PUMLclc12MnyduAG4FvDVvVKsN9HUl+Jcky8EHg8SRfGbqmM6mqTgBvLCOxBDx8Fi4jMRVJHgL+DnhPkuUku4euaUDXAR8Frk/yTPdzy9BFDegy4Ikk32C1Q3Soqr40cE2Ayw9IUpPsuUtSgwx3SWqQ4S5JDTLcJalBhrskNchwl6QGGe6S1KD/A2SUzT1Jye4pAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(b0hat,bins=30)\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "$\\hat{\\beta}_1$の分布"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(b1hat,bins=30)\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "`y`の理論値を図示"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(1000):  # 1000回のループで図示\n",
    "    y_val = b0hat[i] + b1hat[i]*x_val  # yの予測値\n",
    "    plt.plot(x_val,y_val, 'grey')  # yの予測値を図示\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.ylim(0,10) # 縦軸の表示範囲を設定\n",
    "plt.title('1000 rounds of OLS simulation')\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "標本の大きさ`n`を変えて試してみよう。例えば，10, 30, 100, 500, 1000。"
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "py4etrics"
  },
  "kernelspec": {
   "display_name": "latest",
   "language": "python",
   "name": "latest"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  },
  "nteract": {
   "version": "0.14.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
